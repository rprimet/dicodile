
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_mandrill.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_mandrill.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_mandrill.py:

DiCoDiLe on the Mandrill image
==============================

This example illlustrates reconstruction of `Mandrill image
<http://sipi.usc.edu/database/download.php?vol=misc&img=4.2.03>`_
using DiCoDiLe algorithm with default soft_lock value "border" and 9
workers.

.. GENERATED FROM PYTHON SOURCE LINES 10-23

.. code-block:: default


    import numpy as np
    import matplotlib.pyplot as plt

    from dicodile.data.images import fetch_mandrill

    from dicodile.utils.dictionary import init_dictionary
    from dicodile.utils.viz import display_dictionaries
    from dicodile.utils.csc import reconstruct

    from dicodile import dicodile









.. GENERATED FROM PYTHON SOURCE LINES 24-25

We will first download the Mandrill image.

.. GENERATED FROM PYTHON SOURCE LINES 25-32

.. code-block:: default


    X = fetch_mandrill()

    plt.axis('off')
    plt.imshow(X.swapaxes(0, 2))





.. image:: /auto_examples/images/sphx_glr_plot_mandrill_001.png
    :alt: plot mandrill
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Downloading data from http://sipi.usc.edu/database/download.php?vol=misc&img=4.2.03 (1 byte)

    file_sizes:   0%|                                    | 0.00/1.00 [00:00<?, ?B/s]    file_sizes: 73.7kB [00:00, 632kB/s]                                                 file_sizes: 205kB [00:00, 922kB/s]     file_sizes: 787kB [00:00, 2.82MB/s]    file_sizes: 787kB [00:00, 2.27MB/s]
    Successfully downloaded file to /github/home/data/dicodile/images/standard_images/mandrill_color.tif

    <matplotlib.image.AxesImage object at 0x7f93eb0159d0>



.. GENERATED FROM PYTHON SOURCE LINES 33-35

We will create a random dictionary of **K = 25** patches of size **8x8**
from the original Mandrill image to be used for sparse coding.

.. GENERATED FROM PYTHON SOURCE LINES 35-44

.. code-block:: default


    # set dictionary size
    n_atoms = 25

    # set individual atom (patch) size
    atom_support = (8, 8)

    D_init = init_dictionary(X, n_atoms, atom_support, random_state=60)








.. GENERATED FROM PYTHON SOURCE LINES 45-46

We are going to run `dicodile` with **9** workers on **3x3** grids.

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default


    # number of iterations for dicodile
    n_iter = 3

    # number of iterations for csc (dicodile_z)
    max_iter = 10000

    # number of splits along each dimension
    w_world = 3

    # number of workers
    n_workers = w_world * w_world








.. GENERATED FROM PYTHON SOURCE LINES 60-61

Run `dicodile`.

.. GENERATED FROM PYTHON SOURCE LINES 61-70

.. code-block:: default


    D_hat, z_hat, pobj, times = dicodile(X, D_init, n_iter=n_iter,
                                         n_workers=n_workers,
                                         dicod_kwargs={"max_iter": max_iter},
                                         verbose=6)


    print("[DICOD] final cost : {}".format(pobj))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [DEBUG:DICODILE] Lambda_max = 11.274413430904202
    Started 9 workers in 4.52s
    [INFO:DICODILE] - CD iterations 0 / 3 (0s)
    [DEBUG:DICODILE] lambda = 1.127e+00
    [INFO:DICOD-9] converged in 19.096s (14.221s) with 89991 iterations (85648 updates).
    [DEBUG:DICODILE] Objective (z) : 3.377e+04 (21s)
    [PROGRESS:Update D] 1s -   1.00% iterations (3.226e-04)    [PROGRESS:Update D] 1s -   2.00% iterations (1.588e-04)    [PROGRESS:Update D] 1s -   3.00% iterations (7.928e-05)    [PROGRESS:Update D] 1s -   4.00% iterations (7.928e-05)    [PROGRESS:Update D] 2s -   5.00% iterations (7.928e-05)    [PROGRESS:Update D] 2s -   6.00% iterations (7.928e-05)    [PROGRESS:Update D] 2s -   7.00% iterations (7.928e-05)    [PROGRESS:Update D] 2s -   8.00% iterations (7.928e-05)    [PROGRESS:Update D] 2s -   9.00% iterations (7.928e-05)    [PROGRESS:Update D] 2s -  10.00% iterations (7.928e-05)    [PROGRESS:Update D] 2s -  11.00% iterations (7.928e-05)    [PROGRESS:Update D] 2s -  12.00% iterations (7.928e-05)    [PROGRESS:Update D] 2s -  13.00% iterations (7.928e-05)    [PROGRESS:Update D] 2s -  14.00% iterations (7.928e-05)    [PROGRESS:Update D] 3s -  15.00% iterations (7.928e-05)    [PROGRESS:Update D] 3s -  16.00% iterations (7.928e-05)    [PROGRESS:Update D] 3s -  17.00% iterations (7.928e-05)    [PROGRESS:Update D] 3s -  18.00% iterations (7.928e-05)    [PROGRESS:Update D] 3s -  19.00% iterations (7.928e-05)    [PROGRESS:Update D] 3s -  20.00% iterations (7.928e-05)    [PROGRESS:Update D] 3s -  21.00% iterations (7.928e-05)    [PROGRESS:Update D] 3s -  22.00% iterations (7.928e-05)    [PROGRESS:Update D] 3s -  23.00% iterations (7.928e-05)    [PROGRESS:Update D] 4s -  24.00% iterations (7.928e-05)    [PROGRESS:Update D] 4s -  25.00% iterations (7.928e-05)    [PROGRESS:Update D] 4s -  26.00% iterations (7.928e-05)    [PROGRESS:Update D] 4s -  27.00% iterations (7.928e-05)    [PROGRESS:Update D] 4s -  28.00% iterations (7.928e-05)    [PROGRESS:Update D] 4s -  29.00% iterations (7.928e-05)    [PROGRESS:Update D] 4s -  30.00% iterations (7.928e-05)    [PROGRESS:Update D] 4s -  31.00% iterations (7.928e-05)    [PROGRESS:Update D] 4s -  32.00% iterations (7.928e-05)    [PROGRESS:Update D] 4s -  33.00% iterations (7.928e-05)    [PROGRESS:Update D] 5s -  34.00% iterations (7.928e-05)    [PROGRESS:Update D] 5s -  35.00% iterations (7.928e-05)    [INFO:Update D]: 36 iterations
    [DEBUG:DICODILE] Objective (d) : 3.349e+04  (9s)
    [INFO:DICODILE] - CD iterations 1 / 3 (32s)
    [DEBUG:DICODILE] lambda = 1.127e+00
    [INFO:DICOD-9] converged in 18.832s (14.129s) with 89991 iterations (85340 updates).
    [DEBUG:DICODILE] Objective (z) : 3.301e+04 (23s)
    [PROGRESS:Update D] 1s -   2.00% iterations (1.355e-04)    [PROGRESS:Update D] 1s -   3.00% iterations (1.355e-04)    [PROGRESS:Update D] 1s -   4.00% iterations (1.355e-04)    [PROGRESS:Update D] 1s -   5.00% iterations (1.355e-04)    [PROGRESS:Update D] 2s -   6.00% iterations (1.355e-04)    [PROGRESS:Update D] 2s -   7.00% iterations (1.355e-04)    [PROGRESS:Update D] 2s -   8.00% iterations (1.355e-04)    [PROGRESS:Update D] 2s -   9.00% iterations (1.355e-04)    [PROGRESS:Update D] 2s -  10.00% iterations (1.355e-04)    [PROGRESS:Update D] 2s -  11.00% iterations (1.355e-04)    [PROGRESS:Update D] 2s -  12.00% iterations (1.355e-04)    [PROGRESS:Update D] 2s -  13.00% iterations (1.355e-04)    [PROGRESS:Update D] 2s -  14.00% iterations (1.355e-04)    [PROGRESS:Update D] 2s -  15.00% iterations (1.355e-04)    [PROGRESS:Update D] 3s -  16.00% iterations (1.355e-04)    [PROGRESS:Update D] 3s -  17.00% iterations (1.355e-04)    [PROGRESS:Update D] 3s -  18.00% iterations (1.355e-04)    [PROGRESS:Update D] 3s -  19.00% iterations (1.355e-04)    [PROGRESS:Update D] 3s -  20.00% iterations (1.355e-04)    [PROGRESS:Update D] 3s -  21.00% iterations (1.355e-04)    [PROGRESS:Update D] 3s -  22.00% iterations (1.355e-04)    [PROGRESS:Update D] 3s -  23.00% iterations (1.355e-04)    [PROGRESS:Update D] 3s -  24.00% iterations (1.355e-04)    [PROGRESS:Update D] 3s -  25.00% iterations (1.355e-04)    [PROGRESS:Update D] 4s -  26.00% iterations (1.355e-04)    [PROGRESS:Update D] 4s -  27.00% iterations (1.355e-04)    [PROGRESS:Update D] 4s -  28.00% iterations (1.355e-04)    [PROGRESS:Update D] 4s -  29.00% iterations (6.774e-05)    [PROGRESS:Update D] 4s -  30.00% iterations (7.158e-06)    [INFO:Update D]: 31 iterations
    [DEBUG:DICODILE] Objective (d) : 3.299e+04  (9s)
    [INFO:DICODILE] - CD iterations 2 / 3 (66s)
    [DEBUG:DICODILE] lambda = 1.127e+00
    [INFO:DICOD-9] converged in 18.576s (14.015s) with 89991 iterations (84977 updates).
    [DEBUG:DICODILE] Objective (z) : 3.281e+04 (24s)
    [PROGRESS:Update D] 1s -   2.00% iterations (1.361e-04)    [PROGRESS:Update D] 1s -   3.00% iterations (1.361e-04)    [PROGRESS:Update D] 1s -   4.00% iterations (1.361e-04)    [PROGRESS:Update D] 1s -   5.00% iterations (1.361e-04)    [PROGRESS:Update D] 2s -   6.00% iterations (1.361e-04)    [PROGRESS:Update D] 2s -   7.00% iterations (1.361e-04)    [PROGRESS:Update D] 2s -   8.00% iterations (1.361e-04)    [PROGRESS:Update D] 2s -   9.00% iterations (1.361e-04)    [PROGRESS:Update D] 2s -  10.00% iterations (1.361e-04)    [PROGRESS:Update D] 2s -  11.00% iterations (1.361e-04)    [PROGRESS:Update D] 2s -  12.00% iterations (1.361e-04)    [PROGRESS:Update D] 2s -  13.00% iterations (1.361e-04)    [PROGRESS:Update D] 2s -  14.00% iterations (1.361e-04)    [PROGRESS:Update D] 3s -  15.00% iterations (6.806e-05)    [PROGRESS:Update D] 3s -  16.00% iterations (3.403e-05)    [INFO:Update D]: 17 iterations
    [DEBUG:DICODILE] Objective (d) : 3.280e+04  (7s)
    [INFO:DICOD-9] converged in 18.596s (14.238s) with 89991 iterations (84712 updates).
    [INFO:DICODILE] Finished in 94s
    [DICOD] final cost : [115793.6905497883, 33771.2204680541, 33490.99561578462, 33011.06884665339, 32993.045396588685, 32806.53555409183, 32798.77985719812, 32692.44915192199]




.. GENERATED FROM PYTHON SOURCE LINES 71-73

Plot and compare the initial dictionary `D_init` with the
dictionary `D_hat` improved by `dicodile`.

.. GENERATED FROM PYTHON SOURCE LINES 73-81

.. code-block:: default


    # normalize dictionaries
    normalized_D_init = D_init / D_init.max()
    normalized_D_hat = D_hat / D_hat.max()

    display_dictionaries(normalized_D_init, normalized_D_hat)





.. image:: /auto_examples/images/sphx_glr_plot_mandrill_002.png
    :alt: plot mandrill
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <Figure size 640x480 with 50 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 82-83

Reconstruct the image from `z_hat` and `D_hat`.

.. GENERATED FROM PYTHON SOURCE LINES 83-88

.. code-block:: default


    X_hat = reconstruct(z_hat, D_hat)
    X_hat = np.clip(X_hat, 0, 1)









.. GENERATED FROM PYTHON SOURCE LINES 89-90

Plot the reconstructed image.

.. GENERATED FROM PYTHON SOURCE LINES 90-97

.. code-block:: default


    fig = plt.figure("recovery")

    ax = plt.subplot()
    ax.imshow(X_hat.swapaxes(0, 2))
    ax.axis('off')
    plt.tight_layout()



.. image:: /auto_examples/images/sphx_glr_plot_mandrill_003.png
    :alt: plot mandrill
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  27.026 seconds)


.. _sphx_glr_download_auto_examples_plot_mandrill.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_mandrill.py <plot_mandrill.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_mandrill.ipynb <plot_mandrill.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
